			+--------------------+
			|    EDA092/DIT400   |
			| LAB ASSIGNMENT 2:  |
			| 	THREADS    		   |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP A10 ----

Anton Strandman <anton.strandman@gmail.com>
Patrick Andersson <patrican@student.chalmers.se>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

struct thread
  {
    /* Owned by thread.c. */
    tid_t tid;                          /* Thread identifier. */
    enum thread_status status;          /* Thread state. */
    int64_t block_for_ticks;						/* Number of ticks to block thread */
    char name[16];                      /* Name (for debugging purposes). */
    uint8_t *stack;                     /* Saved stack pointer. */
    int priority;                       /* Priority. */
    struct list_elem allelem;           /* List element for all threads list. */

    /* Shared between thread.c and synch.c. */
    struct list_elem elem;              /* List element. */

#ifdef USERPROG
    /* Owned by userprog/process.c. */
    uint32_t *pagedir;                  /* Page directory. */
#endif

    /* Owned by thread.c. */
    unsigned magic;                     /* Detects stack overflow. */
  };
  
block_for_ticks is defaulted to -1 in create_thread, indicating that it is not blocked.

---- ALGORITHMS ----

In timer_sleep() the new method thread_block_ticks(ticks) is called unless 
ticks < 0 upon which the method return immediately. thread_block_ticks will 
turn off interrupts momentarily in order to set the value block_for_ticks in 
the thread and call the original thread_block method.

The timer interrupt handler calls thread_tick in which all threads are updated with the 
update_blocked_thread method. The update_blocked_thread method will check if the thread is 
blocked (status) and sleeping (block_for ticks > -1). If so it will also decrement the 
block_for_ticks value and unblock if necessary (block_for_ticks <= 0, <=0 is used instead 
of == due to the edgecase when sleep is called with ticks = 0). 

In order to minimize the amount of time spent block_for_ticks is used to identify both if 
the thread is sleeping and for how long it should sleep. This way the processor will not have 
to fetch two different variables from memory. Also we (believe that we) minimize the number of 
operations done in the interrupt handler by having status == THREAD_BLOCKED as the first operation 
for each checked thread. This could be improved by keeping all the blocked threads in a seperate 
structure maintained outside the interrupthandler, but the assignment said to use the 
thread_foreach method.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

We turn of interrupts in thread_block_ticks (required by original thread_block method which is 
called), upon which only one thread can 'run at the same time'. 

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

See above. External interrupts will not happen during the critical thread_block_ticks method call.

---- RATIONALE ----

We choose to disable interrupts in trhead instead of calling semaphores in timer (or similar) as 
it is the design used timer (and the assignment clearly stated that added code should conform 
with the existing design). Also using a synchronize method such as a semaphore would not work as the
semaphore would not be released by the running thread until it finished sleeping, as semaphores are 
not automatically released when a thread is blocked.

			    BATCH SCHEDULING
			    ================
---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, semaphore, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


struct lock queue_lock;

	Lock used to restrict acces to the two queues below and to gain mutual exclusion.

struct condition prio_queue;

	Monitor for waiting priority tasks.

struct condition normal_queue;

	Monitor for waiting normal tasks.

int prio_queue_size;

	The number of waiting priority tasks. Used by normal priority tasks in order to let prority tasks access the bus
	first. The length of the queue in the priority monitor can not be used as its state can be incorrect.

int cur_bus_direction;

	The current direction that the bus is being used in, or was last used in.

int slots;

	The number of available slots on the bus.


---- SYNCHRONIZATION ----

>> C1: How does your solution guarantee that no more that 3 tasks
>> are using the bus in the same direction?

Through the use of the variable slots, which is accessed atomically.

>> C2: What prevents tasks from opposite directions from using the
>> bus simultaneously?

The variable cur_bus_direction which shows the current bus direction. Note however that this is ignored should there
be three available slots on the bus upon the bus direction can be switched.

>> C3: How does your solution grant priority to high priority tasks over
>> the waiting tasks in the same direction?

High priority tasks will always attempt to run should the direction of the bus be correct. Otherwise they wait.

All normal priority tasks first check whether there are any priority tasks waiting to run - with the prio_queue_size 
variable - before attempting to run or waiting accordingly. 

This means that a non-priority task will not run before ANY priority task. This is in order to avoid following example.
One high priority task enters the bus. A high priority task of the other direction is created and waits.
If now any number of normal priority tasks are created in the first direction we do not want them to enter the bus before the 
waiting task. We could theoretically fit in a quick normal priority task on the bus, but since we have no way of knowing their 
running times we do not allow them ro run unless there are no priority tasks waiting.

>> C4: How do you guarantee that despite having priority, high priority
>> tasks do not start using the bus while there are still still using
>> it in the oposite direction?

As before, the variable cur_bus_direction prevents this.

---- RATIONALE ----

>> C6: Why did you choose this design? Did you consider other design 
>> alternatives? In what ways is it superior to another design you considered?

We primarily choose this implementation because of its simplicity as compared to its correctness. We had one other solution
which looked like an abominable monster. This is, in comparison, easy to read and understand logically.

			   SURVEY QUESTIONS (optional)
			   ===========================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

It was fine, we started a bit late and had a rough time, but it worked out in the end.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

Yes, when debugging we ran out of ideas and started looking into the system.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

The current assignment description says to print in transferData. The make check command does not appreciate this. (wil fail the test.)
>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters?

We did not have too much time together with the TA's, so no comment here.

>> Any other comments?

